@page "/yr/room-details/{Id:int}"
@inject IJSRuntime jsRuntime
@inject ILocalStorageService localStorage
@inject IYRRoomService yrRoomService
@*@inject IStripePaymentService stripePaymentService*@
@inject IRoomOrderDetailsService roomOrderDetailsService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = SD.Role_Customer)]
@if (YRBooking?.OrderDetails?.YRRoomDTO?.YRRoomImages == null)
{
<div class="spinner"></div>
}
else
{
<div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">

    <div class="row p-2" style="border-radius:20px; ">
        <div class="col-12 col-lg-5 2 mt-4 mt-md-0" style="border: 1px solid #fff;">
            <EditForm Model="YRBooking" class="container" OnValidSubmit="HandleCheckout">
                <div class="row text-success border-bottom">
                    <div class="col-6 py-1 my-1">
                        <p class="card-title text-warning" style="font-size:x-large">@YRBooking.OrderDetails.YRRoomDTO.Name</p>
                    </div>
                    <div class="col-3 py-1 my-1">
                        <p style="font-size:large;margin:0px;">예약입력</p>
                    </div>
                    <div class="col-3 py-1 my-1"><a href="yr/rooms" class="btn btn-secondary btn-block">뒤로</a></div>
                </div>

                <div class="form-group row my-3">
                    <div class="col-3">
                        <p class="text-warning" style="font-size: medium">이름</p>
                    </div>
                    <div class="col-9">
                        <InputText @bind-Value="YRBooking.OrderDetails.Name" type="text" class="form-control" />
                    </div>
                </div>
                <div class="form-group row" >
                    <div class="col-3">
                        <p class="text-warning" style="font-size: medium">핸드폰</p>
                    </div>
                    <div class="col-9">
                        <InputText @bind-Value="YRBooking.OrderDetails.Phone" type="text" class="form-control" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-3">
                        <p class="text-warning" style="font-size: medium">이메일</p>
                    </div>
                    <div class="col-9">
                        <InputText @bind-Value="YRBooking.OrderDetails.Email" type="text" class="form-control" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-3">
                        <p class="text-warning" style="font-size: medium">체크인</p>
                    </div>
                    <div class="col-9">
                        <InputDate @bind-Value="YRBooking.OrderDetails.CheckInDate" type="date" disabled class="form-control" />
                    </div>
                </div>
               
                <div class="form-group row">
                    <div class="col-3">
                        <p class="text-warning" style="font-size:medium">체크아웃</p>
                    </div>
                    <div class="col-6">
                        <InputDate @bind-Value="YRBooking.OrderDetails.CheckOutDate" type="date" disabled class="form-control" />
                    </div>
                    <div class="col-3">
                        <select class="form-control" value="@NoOfNights" @onchange="HandleNoOfNightsChange">
                            @for (var i = 1; i <= 10; i++)
                            {
                                if (i == NoOfNights)
                                {
                                    <option value="@i" selected="selected">@i</option>
                                }
                                else
                                {
                                    <option value="@i">@i</option>
                                }
                            }
                        </select>
                    </div>
                    @*<p class="text-warning" style="font-size:medium">박</p>*@
                </div>
               
                <div class="form-group">

                    @if (YRBooking.OrderDetails.YRRoomDTO.IsBooked)
                    {
                        <input class="btn btn-secondary form-control" value="Sold Out" />
                    }
                    else
                    {
                        <button type="submit" class="btn btn-success form-control">예약</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>
}


@code {
    [Parameter]
    public int? Id { get; set; }

    public YRRoomBookingVM YRBooking { get; set; } = new YRRoomBookingVM();
    private int NoOfNights { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.Delay(2000);
            YRBooking.OrderDetails = new RoomOrderDetailsDTO();
            if (Id != null)
            {
                if (await localStorage.GetItemAsync<HomeVM>
    (SD.Local_InitialBooking) != null)
                {
                    var roomInitialInfo = await localStorage.GetItemAsync<HomeVM>
                        (SD.Local_InitialBooking);
                    YRBooking.OrderDetails.YRRoomDTO = await yrRoomService.GetYRRoomDetails(Id.Value,
                roomInitialInfo.StartDate.ToString("MM/dd/yyyy"), roomInitialInfo.EndDate.ToString("MM/dd/yyyy"));
                    NoOfNights = roomInitialInfo.NoOfNights;
                    YRBooking.OrderDetails.CheckInDate = roomInitialInfo.StartDate;
                    YRBooking.OrderDetails.CheckOutDate = roomInitialInfo.EndDate;
                    YRBooking.OrderDetails.YRRoomDTO.TotalDays = roomInitialInfo.NoOfNights;
                    YRBooking.OrderDetails.YRRoomDTO.TotalAmount =
                roomInitialInfo.NoOfNights * YRBooking.OrderDetails.YRRoomDTO.RegularRate;
                }
                else
                {
                    YRBooking.OrderDetails.YRRoomDTO = await yrRoomService.GetYRRoomDetails(Id.Value,
                DateTime.Now.ToString("MM/dd/yyyy"), DateTime.Now.AddDays(1).ToString("MM/dd/yyyy"));
                    NoOfNights = 1;
                    YRBooking.OrderDetails.CheckInDate = DateTime.Now;
                    YRBooking.OrderDetails.CheckOutDate = DateTime.Now.AddDays(1);
                    YRBooking.OrderDetails.YRRoomDTO.TotalDays = 1;
                    YRBooking.OrderDetails.YRRoomDTO.TotalAmount =
                    YRBooking.OrderDetails.YRRoomDTO.RegularRate;
                }
            }

            if (await localStorage.GetItemAsync<UserDTO>
                (SD.Local_UserDetails) != null)
            {
                var userInfo = await localStorage.GetItemAsync<UserDTO>
                    (SD.Local_UserDetails);
                YRBooking.OrderDetails.UserId = userInfo.Id;
                YRBooking.OrderDetails.Name = userInfo.Name;
                YRBooking.OrderDetails.Email = userInfo.Email;
                YRBooking.OrderDetails.Phone = userInfo.PhoneNo;
            }
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }
    }


    private async Task HandleNoOfNightsChange(ChangeEventArgs e)
    {
        NoOfNights = Convert.ToInt32(e.Value.ToString());
        YRBooking.OrderDetails.YRRoomDTO = await yrRoomService.GetYRRoomDetails(Id.Value,
        YRBooking.OrderDetails.CheckInDate.ToString("MM/dd/yyyy"),
        YRBooking.OrderDetails.CheckInDate.AddDays(NoOfNights).ToString("MM/dd/yyyy"));

        YRBooking.OrderDetails.CheckOutDate = YRBooking.OrderDetails.CheckInDate.AddDays(NoOfNights);
        YRBooking.OrderDetails.YRRoomDTO.TotalDays = NoOfNights;
        YRBooking.OrderDetails.YRRoomDTO.TotalAmount = NoOfNights * YRBooking.OrderDetails.YRRoomDTO.RegularRate;
    }

    private async Task HandleCheckout()
    {
        if (!await HandleValidation())
        {
            return;
        }

        try
        {

@*            var paymentDTO = new StripePaymentDTO()
            {
                Amount = Convert.ToInt32(YRBooking.OrderDetails.YRRoomDTO.TotalAmount * 100),
                ProductName = YRBooking.OrderDetails.YRRoomDTO.Name,
                ReturnUrl = "/yr/room-details/" + Id
            };

            var result = await stripePaymentService.CheckOut(paymentDTO);*@

    //YRBooking.OrderDetails.StripeSessionId = result.Data.ToString();
            YRBooking.OrderDetails.RoomId = YRBooking.OrderDetails.YRRoomDTO.Id;
            YRBooking.OrderDetails.TotalCost = YRBooking.OrderDetails.YRRoomDTO.TotalAmount;

            var roomOrderDetailsSaved = await roomOrderDetailsService.SaveRoomOrderDetails(YRBooking.OrderDetails);

            await localStorage.SetItemAsync(SD.Local_RoomOrderDetails, roomOrderDetailsSaved);




            //await jsRuntime.InvokeVoidAsync("redirectToCheckout", result.Data.ToString());
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }

    }

    private async Task<bool>
        HandleValidation()
    {
        if (string.IsNullOrEmpty(YRBooking.OrderDetails.Name))
        {
            await jsRuntime.ToastrError("Name cannot be empty");
            return false;
        }
        if (string.IsNullOrEmpty(YRBooking.OrderDetails.Phone))
        {
            await jsRuntime.ToastrError("Phone cannot be empty");
            return false;
        }

        if (string.IsNullOrEmpty(YRBooking.OrderDetails.Email))
        {
            await jsRuntime.ToastrError("Email cannot be empty");
            return false;
        }
        return true;

    }
}
