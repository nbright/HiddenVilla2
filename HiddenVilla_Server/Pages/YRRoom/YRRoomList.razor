@page "/yr-room"
@using Models;
@using Business.Repository.IRepository;
@inject IYRRoomRepository YRRoomrepository
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime
@inject HiddenVilla_Server.Service.IService.IFileUpload FileUpload

@*@attribute [Authorize(Roles = Common.SD.Role_Admin)]*@
<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Room's</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="yr-room/create" class="btn btn-info form-control">Add New Room</NavLink>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Occupancy</th>
                    <th>Rate</th>
                    <th>Sqft</th>
                </tr>
            </thead>
            <tbody>
                @if (YRRooms.Any())
                {
                    foreach (var room in YRRooms)
                    {
                        <tr>
                            <td>@room.Name</td>
                            <td>@room.Occupancy</td>
                            <td>@room.RegularRate.ToString("c")</td>
                            <td>@room.SqFt</td>
                            <td>
                                <NavLink href="@($"yr-room/edit/{room.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(room.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No records</td>
                    </tr>

                }
            </tbody>
        </table>
    </div>
</div>

<DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code {
    private IEnumerable<YRRoomDTO> YRRooms { get; set; } = new List<YRRoomDTO>();
    private int? DeleteRoomId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        YRRooms = await YRRoomrepository.GetAllYRRooms();
    }

    private async Task HandleDelete(int roomId)
    {
        DeleteRoomId = roomId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && DeleteRoomId != null)
        {
            YRRoomDTO hotelRoom = await YRRoomrepository.GetYRRoom(DeleteRoomId.Value);
            if (hotelRoom.YRRoomImages == null)
            {

            }
            else
            {
                foreach (var image in hotelRoom.YRRoomImages)
                {
                    var imageName = image.RoomImageUrl.Replace($"RoomImages/", "");
                    FileUpload.DeleteFile(imageName);
                }
            }
            await YRRoomrepository.DeleteYRRoom(DeleteRoomId.Value);
            await JsRuntime.ToastrSuccess("Hotel Room Deleted successfully");
            YRRooms = await YRRoomrepository.GetAllYRRooms();
        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsProcessing = false;
    }
}
